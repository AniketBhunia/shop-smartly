{"ast":null,"code":"import { FormControl, Validators, FormGroup } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/Services/login.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/material/card\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\nfunction LoginComponent_span_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 16);\n    i0.ɵɵtext(1, \" Name is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_span_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 16);\n    i0.ɵɵtext(1, \" Email is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_span_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 16);\n    i0.ɵɵtext(1, \" Password is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class LoginComponent {\n  constructor(login) {\n    this.login = login;\n    this.nativeSelectFormControl = new FormControl('valid', [Validators.required, Validators.pattern('valid')]);\n    this.profileForm = new FormGroup({\n      ename: new FormControl('', [Validators.required]),\n      email: new FormControl('', [Validators.required]),\n      password: new FormControl('', [Validators.required])\n    });\n  }\n  // public myError = (controlName: string, errorName: string) =>{\n  //   return this.profileForm.controls[controlName].hasError(errorName);\n  //   }\n  get registerFormControl() {\n    return this.profileForm.controls;\n  }\n  onSubmit() {\n    console.warn(this.profileForm.value);\n    const user = {\n      name: this.profileForm.value.ename,\n      email: this.profileForm.value.email,\n      password: this.profileForm.value.password\n    };\n    this.login.doLogin(user).subscribe(res => {\n      console.log(res);\n      const token = res['token'];\n      const userId = res['id'];\n      const name = res['name'];\n      const email = res['email'];\n      const role = res['role'];\n      this.login.setBearerToken(token);\n      this.login.setUserId(userId);\n      this.login.setEmail(email);\n      this.login.setName(name);\n      this.login.setRole(role);\n    });\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.LoginService));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 31,\n  vars: 4,\n  consts: [[2, \"display\", \"flex\", \"flex-direction\", \"row\", \"width\", \"50%\", \"box-shadow\", \"5px 5px 5px #ccc\", \"margin-bottom\", \"3rem\", \"overflow\", \"hidden\", \"margin-bottom\", \"0\", \"height\", \"96%\"], [2, \"overflow\", \"hidden\", \"width\", \"60%\"], [\"src\", \"../../../assets/login.jpg\", \"width\", \"100%\"], [2, \"width\", \"50%\", \"padding\", \"1rem\"], [2, \"width\", \"100%\", 3, \"formGroup\", \"ngSubmit\"], [2, \"width\", \"100%\"], [\"id\", \"ename\", \"type\", \"text\", \"formControlName\", \"ename\", \"placeholder\", \"User Name*\", \"matInput\", \"\", 2, \"padding-top\", \"0.3rem\", \"padding-bottom\", \"0.3rem\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"id\", \"email\", \"type\", \"email\", \"formControlName\", \"email\", \"placeholder\", \"Email*\", \"matInput\", \"\", \"required\", \"email is required\", 2, \"width\", \"100%\", \"padding-top\", \"0.3rem\", \"padding-bottom\", \"0.3rem\"], [\"id\", \"password\", \"type\", \"password\", \"formControlName\", \"password\", \"placeholder\", \"Password*\", \"matInput\", \"\", 2, \"width\", \"100%\", \"padding-top\", \"0.3rem\", \"padding-bottom\", \"0.3rem\"], [1, \"button\"], [\"type\", \"submit\", 1, \"btn1\"], [2, \"display\", \"flex\", \"justify-content\", \"space-between\", \"margin-top\", \"2rem\"], [2, \"display\", \"flex\", \"justify-content\", \"baseline\"], [\"routerLink\", \"/signUpUser\"], [\"routerLink\", \"/signUpSeller\"], [1, \"text-danger\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-card\", 0)(1, \"mat-card-content\", 1);\n      i0.ɵɵelement(2, \"img\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 3)(4, \"mat-card-title\")(5, \"h1\");\n      i0.ɵɵtext(6, \"Log In\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(7, \"mat-card-content\")(8, \"form\", 4);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_8_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(9, \"p\")(10, \"mat-form-field\", 5);\n      i0.ɵɵelement(11, \"input\", 6);\n      i0.ɵɵtemplate(12, LoginComponent_span_12_Template, 2, 0, \"span\", 7);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(13, \"p\")(14, \"mat-form-field\", 5);\n      i0.ɵɵelement(15, \"input\", 8);\n      i0.ɵɵtemplate(16, LoginComponent_span_16_Template, 2, 0, \"span\", 7);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(17, \"p\")(18, \"mat-form-field\", 5);\n      i0.ɵɵelement(19, \"input\", 9);\n      i0.ɵɵtemplate(20, LoginComponent_span_20_Template, 2, 0, \"span\", 7);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(21, \"div\", 10)(22, \"button\", 11);\n      i0.ɵɵtext(23, \"LOG IN\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(24, \"div\", 12)(25, \"div\", 13)(26, \"a\", 14);\n      i0.ɵɵtext(27, \"Create User\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(28, \"div\")(29, \"a\", 15);\n      i0.ɵɵtext(30, \"Create Seller\");\n      i0.ɵɵelementEnd()()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"formGroup\", ctx.profileForm);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", ctx.registerFormControl.ename.touched && (ctx.registerFormControl.ename.errors == null ? null : ctx.registerFormControl.ename.errors[\"required\"]));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", ctx.registerFormControl.email.touched && (ctx.registerFormControl.email.errors == null ? null : ctx.registerFormControl.email.errors[\"required\"]));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", ctx.registerFormControl.password.touched && (ctx.registerFormControl.password.errors == null ? null : ctx.registerFormControl.password.errors[\"required\"]));\n    }\n  },\n  dependencies: [i2.NgIf, i3.RouterLink, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.RequiredValidator, i5.MatCard, i5.MatCardContent, i5.MatCardTitle, i6.MatFormField, i7.MatInput, i4.FormGroupDirective, i4.FormControlName],\n  styles: [\"[_nghost-%COMP%] {\\r\\n    display: flex;\\r\\n    justify-content: center;\\r\\n     margin: 30px 0px;\\r\\n\\r\\n  }\\r\\n\\r\\n  .mat-form-field[_ngcontent-%COMP%] {\\r\\n    width: 100%;\\r\\n    min-width: 300px;\\r\\n  }\\r\\n .mat-mdc-text-field-wrapper{\\r\\n  height: 50px !important;\\r\\n}\\r\\n  mat-card-title[_ngcontent-%COMP%], mat-card-content[_ngcontent-%COMP%] {\\r\\n    display: flex;\\r\\n    justify-content: center;\\r\\n  }\\r\\n\\r\\n  .error[_ngcontent-%COMP%] {\\r\\n    padding: 16px;\\r\\n    width: 300px;\\r\\n    color: white;\\r\\n    background-color: red;\\r\\n  }\\r\\n\\r\\n  .button[_ngcontent-%COMP%] {\\r\\n    display: flex;\\r\\n    justify-content: center;\\r\\n\\r\\n  }\\r\\n.btn1[_ngcontent-%COMP%]{\\r\\n  padding-left: 6%;\\r\\n  border-radius: 999px;\\r\\n  padding-right: 6%;\\r\\n  padding-top: 2%;\\r\\n  padding-bottom: 2%; background-color: white;border-color: #4cc8ff;\\r\\n}\\r\\n.btn1[_ngcontent-%COMP%]:hover{\\r\\n  background-color: whitesmoke;\\r\\n  box-shadow: 5px 5px 5px #ccc;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvQ29tcG9uZW50cy9sb2dpbi9sb2dpbi5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQTt5QkFDeUI7O0VBRXZCO0lBQ0UsYUFBYTtJQUNiLHVCQUF1QjtLQUN0QixnQkFBZ0I7O0VBRW5COztFQUVBO0lBQ0UsV0FBVztJQUNYLGdCQUFnQjtFQUNsQjtBQUNGO0VBQ0UsdUJBQXVCO0FBQ3pCO0VBQ0U7O0lBRUUsYUFBYTtJQUNiLHVCQUF1QjtFQUN6Qjs7RUFFQTtJQUNFLGFBQWE7SUFDYixZQUFZO0lBQ1osWUFBWTtJQUNaLHFCQUFxQjtFQUN2Qjs7RUFFQTtJQUNFLGFBQWE7SUFDYix1QkFBdUI7O0VBRXpCO0FBQ0Y7RUFDRSxnQkFBZ0I7RUFDaEIsb0JBQW9CO0VBQ3BCLGlCQUFpQjtFQUNqQixlQUFlO0VBQ2Ysa0JBQWtCLEVBQUUsdUJBQXVCLENBQUMscUJBQXFCO0FBQ25FO0FBQ0E7RUFDRSw0QkFBNEI7RUFDNUIsNEJBQTRCO0FBQzlCIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbi8qXHJcbiAgLi4uLi4uLi4uLi4uLi4uLi4uLi4uICovXHJcblxyXG4gIDpob3N0IHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICBtYXJnaW46IDMwcHggMHB4O1xyXG5cclxuICB9XHJcblxyXG4gIC5tYXQtZm9ybS1maWVsZCB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIG1pbi13aWR0aDogMzAwcHg7XHJcbiAgfVxyXG46Om5nLWRlZXAubWF0LW1kYy10ZXh0LWZpZWxkLXdyYXBwZXJ7XHJcbiAgaGVpZ2h0OiA1MHB4ICFpbXBvcnRhbnQ7XHJcbn1cclxuICBtYXQtY2FyZC10aXRsZSxcclxuICBtYXQtY2FyZC1jb250ZW50IHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICB9XHJcblxyXG4gIC5lcnJvciB7XHJcbiAgICBwYWRkaW5nOiAxNnB4O1xyXG4gICAgd2lkdGg6IDMwMHB4O1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmVkO1xyXG4gIH1cclxuXHJcbiAgLmJ1dHRvbiB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcblxyXG4gIH1cclxuLmJ0bjF7XHJcbiAgcGFkZGluZy1sZWZ0OiA2JTtcclxuICBib3JkZXItcmFkaXVzOiA5OTlweDtcclxuICBwYWRkaW5nLXJpZ2h0OiA2JTtcclxuICBwYWRkaW5nLXRvcDogMiU7XHJcbiAgcGFkZGluZy1ib3R0b206IDIlOyBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtib3JkZXItY29sb3I6ICM0Y2M4ZmY7XHJcbn1cclxuLmJ0bjE6aG92ZXJ7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGVzbW9rZTtcclxuICBib3gtc2hhZG93OiA1cHggNXB4IDVweCAjY2NjO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["FormControl","Validators","FormGroup","i0","LoginComponent","constructor","login","required","pattern","ename","email","password","registerFormControl","profileForm","controls","onSubmit","console","warn","value","user","name","doLogin","subscribe","res","log","token","userId","role","setBearerToken","setUserId","setEmail","setName","setRole","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\KIIT\\Desktop\\CapstoneDemoV3\\shop-smartly\\product-webapp\\webapp\\src\\app\\Components\\login\\login.component.ts","C:\\Users\\KIIT\\Desktop\\CapstoneDemoV3\\shop-smartly\\product-webapp\\webapp\\src\\app\\Components\\login\\login.component.html"],"sourcesContent":["\r\nimport { Component } from '@angular/core';\r\nimport { FormControl, Validators ,FormGroup} from '@angular/forms';\r\nimport { LoginService } from 'src/app/Services/login.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css'],\r\n\r\n})\r\nexport class LoginComponent {\r\n\r\nconstructor(private login:LoginService){}\r\n  nativeSelectFormControl = new FormControl('valid', [\r\n    Validators.required,\r\n    Validators.pattern('valid'),\r\n  ]);\r\n\r\n  profileForm = new FormGroup({\r\n    ename:new FormControl('',[Validators.required]),\r\n    email: new FormControl('',[Validators.required]),\r\n    password: new FormControl('',[Validators.required]),\r\n  });\r\n\r\n  // public myError = (controlName: string, errorName: string) =>{\r\n  //   return this.profileForm.controls[controlName].hasError(errorName);\r\n  //   }\r\n\r\n  get registerFormControl() {\r\n    return this.profileForm.controls;\r\n  }\r\n\r\n  onSubmit(){\r\n    console.warn(this.profileForm.value);\r\n    const user:any={name:this.profileForm.value.ename,email:this.profileForm.value.email,password:this.profileForm.value.password}\r\n\r\n    this.login.doLogin(user).subscribe((res:any)=>{\r\n    console.log(res);\r\n    const token = res['token'];\r\n    const userId=res['id'];\r\n    const name=res['name'];\r\n    const email=res['email'];\r\n    const role=res['role'];\r\n    this.login.setBearerToken(token);\r\n    this.login.setUserId(userId);\r\n    this.login.setEmail(email);\r\n    this.login.setName(name);\r\n    this.login.setRole(role);\r\n    }\r\n\r\n    );\r\n  }\r\n}\r\n","<mat-card\r\n  style=\"display: flex; flex-direction: row; width: 50%;  box-shadow: 5px 5px 5px #ccc;margin-bottom: 3rem; overflow: hidden;margin-bottom: 0;height: 96%;\">\r\n\r\n  <mat-card-content style=\"overflow: hidden; width: 60%;\">\r\n    <img src=\"../../../assets/login.jpg\" width=\"100%\">\r\n  </mat-card-content>\r\n  <div style=\"width: 50%; padding: 1rem;\">\r\n    <mat-card-title>\r\n      <!-- <img src=\"../../../assets/Login-PNG-Free-Image.png\" style=\"width: 100px;\"> -->\r\n      <h1>Log In</h1>\r\n    </mat-card-title>\r\n    <mat-card-content>\r\n      <form [formGroup]=\"profileForm\" (ngSubmit)=\"onSubmit()\" style=\"width: 100%;\">\r\n        <p>\r\n          <mat-form-field style=\"width: 100%;\">\r\n\r\n            <input id=\"ename\" type=\"text\" style=\"padding-top: 0.3rem;padding-bottom: 0.3rem;\" formControlName=\"ename\"\r\n              placeholder=\"User Name*\" matInput>\r\n            <span class=\"text-danger\"\r\n              *ngIf=\"registerFormControl.ename.touched && registerFormControl.ename.errors?.['required']\">\r\n              Name is required\r\n            </span>\r\n            <!-- <div *ngIf=\"profileForm.invalid\" class=\"alert alert-danger\">\r\n            <div *ngIf=\"profileForm.errors?.['required']\">\r\n              Name is required.\r\n            </div>\r\n          </div> -->\r\n          </mat-form-field>\r\n        </p>\r\n        <p>\r\n          <mat-form-field style=\"width: 100%;\">\r\n            <input id=\"email\" type=\"email\" style=\"width: 100%;padding-top: 0.3rem;padding-bottom: 0.3rem;\"\r\n              formControlName=\"email\" placeholder=\"Email*\" matInput required=\"email is required\">\r\n            <span class=\"text-danger\"\r\n              *ngIf=\"registerFormControl.email.touched && registerFormControl.email.errors?.['required']\">\r\n              Email is required\r\n            </span>\r\n\r\n          </mat-form-field>\r\n        </p>\r\n        <p>\r\n          <mat-form-field style=\"width: 100%;\">\r\n            <input id=\"password\" type=\"password\" formControlName=\"password\"\r\n              style=\"width: 100%;padding-top: 0.3rem;padding-bottom: 0.3rem;\" placeholder=\"Password*\" matInput>\r\n            <span class=\"text-danger\"\r\n              *ngIf=\"registerFormControl.password.touched && registerFormControl.password.errors?.['required']\">\r\n              Password is required\r\n            </span>\r\n          </mat-form-field>\r\n        </p>\r\n        <div class=\"button\">\r\n          <button type=\"submit\" class=\"btn1\">LOG IN</button>\r\n        </div>\r\n\r\n\r\n        <div style=\"display: flex; justify-content: space-between; margin-top: 2rem;\">\r\n          <div style=\"display: flex; justify-content: baseline;\">\r\n\r\n            <a routerLink=\"/signUpUser\">Create User</a>\r\n          </div>\r\n\r\n          <div>\r\n            <a routerLink=\"/signUpSeller\">Create Seller</a>\r\n          </div>\r\n\r\n        </div>\r\n      </form>\r\n\r\n    </mat-card-content>\r\n\r\n  </div>\r\n\r\n\r\n\r\n</mat-card>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
