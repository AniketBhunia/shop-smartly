{"ast":null,"code":"// // shopping-cart.service.ts\n// import { EventEmitter, Injectable } from '@angular/core';\n// import { ShoppingCartItem } from '../cartModel';\n// import { HttpClient } from '@angular/common/http';\n// import { Observable } from 'rxjs';\n// import { Product } from '../data.types';\n// @Injectable({\n//   providedIn: 'root'\n// })\n// export class ShoppingCartService {\n//  private baseUrl = 'http://localhost:8080'; // Your backend API URL\n//  cartData = new EventEmitter<ShoppingCartItem[] | []>();\n//   constructor(private http: HttpClient) { }\n//   addToCart(userId: number, productId: number): Observable<any> {\n//     const cart = { userId, addedProductList: [{ productId }] };\n//     return this.http.post(`${this.baseUrl}/cart/add`, cart);\n//   }\n//   getCart(): Observable<any> {\n//     return this.http.get(`http://localhost:8081/cart/getall`);\n//   }\n//   deleteFromCart(cartId: number): Observable<any> {\n//     return this.http.delete(`http://localhost:8081/cart/${cartId}`);\n//   }\n//   getUserData(cartId: number):Observable<any>{\n//     return this.http.get(`http://localhost:8081/cart/${cartId}`)\n//   }\n//   // calculateGrandTotal(): number {\n//   //   let total = 0;\n//   //   for (const item of this.ShoppingCartItem) {\n//   //     total += item.unitPrice * item.quantity;\n//   //   }\n//   //   return total;\n//   // }\n//   // updateCartItem(updatedItem: ShoppingCartItem) {\n//   //   // Implement the logic to update a cart item\n//   //   const index = this.cartItems.findIndex(item => item.product.id === updatedItem.product.id);\n//   //   if (index !== -1) {\n//   //     this.cartItems[index] = updatedItem;\n//   //   }\n//   // }\n//   // deleteCartItem(itemToDelete: ShoppingCartItem) {\n//   //   // Implement the logic to delete a cart item\n//   //   this.cartItems = this.cartItems.filter(item => item.product.id !== itemToDelete.product.id);\n//   // }\n//   localAddToCart(data: Product) {\n//     let cartData = [];\n//     let localCart = localStorage.getItem('localCart');\n//     if (!localCart) {\n//       localStorage.setItem('localCart', JSON.stringify([data]));\n//       this.cartData.emit([this.convertToShoppingCartItem(data)]); // Convert to ShoppingCartItem\n//     } else {\n//       cartData = JSON.parse(localCart);\n//       cartData.push(data);\n//       localStorage.setItem('localCart', JSON.stringify(cartData));\n//       this.cartData.emit(this.convertToShoppingCartItems(cartData)); // Convert to ShoppingCartItem array\n//     }\n//   }\n//   removeItemFromCart(productID: number) {\n//     let cartData = localStorage.getItem('localCart');\n//     if (cartData) {\n//       let items: Product[] = JSON.parse(cartData);\n//       items = items.filter((item: Product) => productID !== item.product_id);\n//       localStorage.setItem('localCart', JSON.stringify(items));\n//       this.cartData.emit(this.convertToShoppingCartItems(items)); // Convert to ShoppingCartItem array\n//     }\n//   }\n//   addtoCart(data:ShoppingCartItem) {\n//     // Assuming you need to convert data to ShoppingCartItem format before sending\n//     const shoppingCartItem = this.convertToShoppingCartItemData(data);\n//     return this.http.post('http://localhost:3000/cart', shoppingCartItem);\n//   }\n//   private convertToShoppingCartItem(product: Product): ShoppingCartItem {\n//     return {\n//       CartId: '',\n//       UserId: '',\n//       ProductId: product.product_id.toString(),\n//       CartTotalPrice: 0,\n//       CartImage: product.product_image.toString(), // Update with actual image URL if needed\n//       ProductPrice: product.product_current_price,\n//       ProductQuantity: 1 // Assuming 1 as default quantity when adding to cart\n//     };\n//   }\n//   private convertToShoppingCartItems(products: Product[]): ShoppingCartItem[] {\n//     return products.map(product => this.convertToShoppingCartItem(product));\n//   }\n//   private convertToShoppingCartItemData(data:any): ShoppingCartItem {\n//     // Convert CartData to ShoppingCartItem format here\n//     // Modify this function based on your actual data structure\n//     return {\n//       CartId: '',\n//       UserId: '',\n//       ProductId: data.productId.toString(),\n//       CartTotalPrice: 0,\n//       CartImage: '', // Update with actual image URL if needed\n//       ProductPrice: data.productPrice,\n//       ProductQuantity: data.productQuantity\n//     };\n//   }\n// }\n// shopping-cart.service.ts\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ShoppingCartService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8082'; // Your backend API URL\n    this.cartData = new EventEmitter();\n  }\n  addToCart(data) {\n    return this.http.post(`${this.baseUrl}/cart/add`, data);\n  }\n  getCart() {\n    return this.http.get(`${this.baseUrl}/cart/getall`);\n  }\n  deleteFromCart(cartId) {\n    return this.http.delete(`${this.baseUrl}/cart/${cartId}`);\n  }\n  getUserData(cartId) {\n    return this.http.get(`${this.baseUrl}/cart/${cartId}`);\n  }\n  updateCartItem(productId, newQuantity) {\n    const url = `${this.baseUrl}/cart/update?productId=${productId}&newQuantity=${newQuantity}`;\n    return this.http.put(url, {});\n  }\n  deleteCartItem(productId) {\n    return this.http.delete(`${this.baseUrl}/cart/${productId}`);\n  }\n  calculateGrandTotal(cartItems) {\n    let total = 0;\n    for (const item of cartItems) {\n      total += item.cartTotalPrice * item.productQuantity;\n    }\n    return total;\n  }\n}\nShoppingCartService.ɵfac = function ShoppingCartService_Factory(t) {\n  return new (t || ShoppingCartService)(i0.ɵɵinject(i1.HttpClient));\n};\nShoppingCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ShoppingCartService,\n  factory: ShoppingCartService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,SAASA,YAAY,QAAoB,eAAe;;;AAQxD,OAAM,MAAOC,mBAAmB;EAI9BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHhB,YAAO,GAAG,uBAAuB,CAAC,CAAC;IAC3C,aAAQ,GAAG,IAAIH,YAAY,EAA2B;EAEf;EAEvCI,SAAS,CAACC,IAAqB;IAC7B,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAC,GAAG,IAAI,CAACC,OAAO,WAAW,EAACF,IAAI,CAAC;EACxD;EAEAG,OAAO;IACL,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAqB,GAAG,IAAI,CAACF,OAAO,cAAc,CAAC;EACzE;EAEAG,cAAc,CAACC,MAAc;IAC3B,OAAO,IAAI,CAACR,IAAI,CAACS,MAAM,CAAC,GAAG,IAAI,CAACL,OAAO,SAASI,MAAM,EAAE,CAAC;EAC3D;EAEAE,WAAW,CAACF,MAAc;IACxB,OAAO,IAAI,CAACR,IAAI,CAACM,GAAG,CAAmB,GAAG,IAAI,CAACF,OAAO,SAASI,MAAM,EAAE,CAAC;EAC1E;EAEAG,cAAc,CAACC,SAAiB,EAAEC,WAAmB;IACnD,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACV,OAAO,0BAA0BQ,SAAS,gBAAgBC,WAAW,EAAE;IAC3F,OAAO,IAAI,CAACb,IAAI,CAACe,GAAG,CAAqBD,GAAG,EAAE,EAAE,CAAC;EACnD;EAEAE,cAAc,CAACJ,SAAa;IAC1B,OAAO,IAAI,CAACZ,IAAI,CAACS,MAAM,CAAC,GAAG,IAAI,CAACL,OAAO,SAASQ,SAAS,EAAE,CAAC;EAC9D;EAEAK,mBAAmB,CAACC,SAA6B;IAC/C,IAAIC,KAAK,GAAG,CAAC;IACb,KAAK,MAAMC,IAAI,IAAIF,SAAS,EAAE;MAC5BC,KAAK,IAAIC,IAAI,CAACC,cAAc,GAAGD,IAAI,CAACE,eAAe;;IAErD,OAAOH,KAAK;EACd;;AArCWrB,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;SAAnBA,mBAAmB;EAAAyB,SAAnBzB,mBAAmB;EAAA0B,YAFlB;AAAM","names":["EventEmitter","ShoppingCartService","constructor","http","addToCart","data","post","baseUrl","getCart","get","deleteFromCart","cartId","delete","getUserData","updateCartItem","productId","newQuantity","url","put","deleteCartItem","calculateGrandTotal","cartItems","total","item","cartTotalPrice","productQuantity","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\KIIT\\Desktop\\CapstoneDemoV3\\shop-smartly\\product-webapp\\webapp\\src\\app\\Services\\shopping-cart.service.ts"],"sourcesContent":["// // shopping-cart.service.ts\r\n\r\n// import { EventEmitter, Injectable } from '@angular/core';\r\n// import { ShoppingCartItem } from '../cartModel';\r\n// import { HttpClient } from '@angular/common/http';\r\n// import { Observable } from 'rxjs';\r\n// import { Product } from '../data.types';\r\n\r\n// @Injectable({\r\n//   providedIn: 'root'\r\n// })\r\n// export class ShoppingCartService {\r\n\r\n//  private baseUrl = 'http://localhost:8080'; // Your backend API URL\r\n//  cartData = new EventEmitter<ShoppingCartItem[] | []>();\r\n\r\n//   constructor(private http: HttpClient) { }\r\n\r\n//   addToCart(userId: number, productId: number): Observable<any> {\r\n//     const cart = { userId, addedProductList: [{ productId }] };\r\n//     return this.http.post(`${this.baseUrl}/cart/add`, cart);\r\n//   }\r\n\r\n//   getCart(): Observable<any> {\r\n//     return this.http.get(`http://localhost:8081/cart/getall`);\r\n//   }\r\n\r\n//   deleteFromCart(cartId: number): Observable<any> {\r\n//     return this.http.delete(`http://localhost:8081/cart/${cartId}`);\r\n//   }\r\n\r\n//   getUserData(cartId: number):Observable<any>{\r\n//     return this.http.get(`http://localhost:8081/cart/${cartId}`)\r\n//   }\r\n//   // calculateGrandTotal(): number {\r\n//   //   let total = 0;\r\n//   //   for (const item of this.ShoppingCartItem) {\r\n//   //     total += item.unitPrice * item.quantity;\r\n//   //   }\r\n//   //   return total;\r\n//   // }\r\n\r\n//   // updateCartItem(updatedItem: ShoppingCartItem) {\r\n//   //   // Implement the logic to update a cart item\r\n//   //   const index = this.cartItems.findIndex(item => item.product.id === updatedItem.product.id);\r\n//   //   if (index !== -1) {\r\n//   //     this.cartItems[index] = updatedItem;\r\n//   //   }\r\n//   // }\r\n\r\n//   // deleteCartItem(itemToDelete: ShoppingCartItem) {\r\n//   //   // Implement the logic to delete a cart item\r\n//   //   this.cartItems = this.cartItems.filter(item => item.product.id !== itemToDelete.product.id);\r\n//   // }\r\n\r\n\r\n\r\n//   localAddToCart(data: Product) {\r\n//     let cartData = [];\r\n//     let localCart = localStorage.getItem('localCart');\r\n//     if (!localCart) {\r\n//       localStorage.setItem('localCart', JSON.stringify([data]));\r\n//       this.cartData.emit([this.convertToShoppingCartItem(data)]); // Convert to ShoppingCartItem\r\n//     } else {\r\n//       cartData = JSON.parse(localCart);\r\n//       cartData.push(data);\r\n//       localStorage.setItem('localCart', JSON.stringify(cartData));\r\n//       this.cartData.emit(this.convertToShoppingCartItems(cartData)); // Convert to ShoppingCartItem array\r\n//     }\r\n//   }\r\n\r\n//   removeItemFromCart(productID: number) {\r\n//     let cartData = localStorage.getItem('localCart');\r\n//     if (cartData) {\r\n//       let items: Product[] = JSON.parse(cartData);\r\n//       items = items.filter((item: Product) => productID !== item.product_id);\r\n//       localStorage.setItem('localCart', JSON.stringify(items));\r\n//       this.cartData.emit(this.convertToShoppingCartItems(items)); // Convert to ShoppingCartItem array\r\n//     }\r\n//   }\r\n\r\n//   addtoCart(data:ShoppingCartItem) {\r\n//     // Assuming you need to convert data to ShoppingCartItem format before sending\r\n//     const shoppingCartItem = this.convertToShoppingCartItemData(data);\r\n//     return this.http.post('http://localhost:3000/cart', shoppingCartItem);\r\n//   }\r\n//   private convertToShoppingCartItem(product: Product): ShoppingCartItem {\r\n//     return {\r\n//       CartId: '',\r\n//       UserId: '',\r\n//       ProductId: product.product_id.toString(),\r\n//       CartTotalPrice: 0,\r\n//       CartImage: product.product_image.toString(), // Update with actual image URL if needed\r\n//       ProductPrice: product.product_current_price,\r\n//       ProductQuantity: 1 // Assuming 1 as default quantity when adding to cart\r\n//     };\r\n//   }\r\n\r\n//   private convertToShoppingCartItems(products: Product[]): ShoppingCartItem[] {\r\n//     return products.map(product => this.convertToShoppingCartItem(product));\r\n//   }\r\n\r\n//   private convertToShoppingCartItemData(data:any): ShoppingCartItem {\r\n//     // Convert CartData to ShoppingCartItem format here\r\n//     // Modify this function based on your actual data structure\r\n//     return {\r\n//       CartId: '',\r\n//       UserId: '',\r\n//       ProductId: data.productId.toString(),\r\n//       CartTotalPrice: 0,\r\n//       CartImage: '', // Update with actual image URL if needed\r\n//       ProductPrice: data.productPrice,\r\n//       ProductQuantity: data.productQuantity\r\n//     };\r\n//   }\r\n// }\r\n\r\n// shopping-cart.service.ts\r\n\r\nimport { EventEmitter, Injectable } from '@angular/core';\r\nimport { ShoppingCartItem } from '../cartModel';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ShoppingCartService {\r\n  private baseUrl = 'http://localhost:8082'; // Your backend API URL\r\n  cartData = new EventEmitter<ShoppingCartItem[] | []>();\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  addToCart(data:ShoppingCartItem): Observable<any> {\r\n    return this.http.post(`${this.baseUrl}/cart/add`,data);\r\n  }\r\n\r\n  getCart(): Observable<ShoppingCartItem[]> {\r\n    return this.http.get<ShoppingCartItem[]>(`${this.baseUrl}/cart/getall`);\r\n  }\r\n\r\n  deleteFromCart(cartId: string): Observable<any> {\r\n    return this.http.delete(`${this.baseUrl}/cart/${cartId}`);\r\n  }\r\n\r\n  getUserData(cartId: number): Observable<ShoppingCartItem> {\r\n    return this.http.get<ShoppingCartItem>(`${this.baseUrl}/cart/${cartId}`);\r\n  }\r\n\r\n  updateCartItem(productId: number, newQuantity: number): Observable<ShoppingCartItem[]> {\r\n    const url = `${this.baseUrl}/cart/update?productId=${productId}&newQuantity=${newQuantity}`;\r\n    return this.http.put<ShoppingCartItem[]>(url, {});\r\n  }\r\n\r\n  deleteCartItem(productId:any): Observable<any> {\r\n    return this.http.delete(`${this.baseUrl}/cart/${productId}`);\r\n  }\r\n\r\n  calculateGrandTotal(cartItems: ShoppingCartItem[]): number {\r\n    let total = 0;\r\n    for (const item of cartItems) {\r\n      total += item.cartTotalPrice * item.productQuantity;\r\n    }\r\n    return total;\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
